// <auto-generated />
using LiveHAPI.Infrastructure;
using LiveHAPI.Shared.Enum;
using LiveHAPI.Shared.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LiveHAPI.Infrastructure.Migrations
{
    [DbContext(typeof(LiveHAPIContext))]
    [Migration("20180911092612_NickName")]
    partial class NickName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.Encounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTime>("EncounterDate");

                    b.Property<Guid>("EncounterTypeId");

                    b.Property<Guid>("FormId");

                    b.Property<Guid?>("IndexClientId");

                    b.Property<bool>("IsComplete");

                    b.Property<Guid>("PracticeId");

                    b.Property<Guid>("ProviderId");

                    b.Property<DateTime?>("Started");

                    b.Property<DateTime?>("Stopped");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EncounterTypeId");

                    b.HasIndex("FormId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.Obs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("EncounterId");

                    b.Property<bool>("IsNull");

                    b.Property<DateTime>("ObsDate");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid?>("ValueCoded");

                    b.Property<DateTime?>("ValueDateTime");

                    b.Property<string>("ValueMultiCoded");

                    b.Property<decimal?>("ValueNumeric");

                    b.Property<string>("ValueText");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("Obses");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsFamilyTraceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<Guid?>("Consent");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid>("IndexClientId");

                    b.Property<Guid>("Mode");

                    b.Property<string>("ModeDisplay");

                    b.Property<Guid>("Outcome");

                    b.Property<string>("OutcomeDisplay");

                    b.Property<DateTime?>("Reminder");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsFamilyTraceResults");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsFinalTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid?>("CoupleDiscordant");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid?>("FinalResult");

                    b.Property<string>("FinalResultCode");

                    b.Property<Guid?>("FirstTestResult");

                    b.Property<string>("FirstTestResultCode");

                    b.Property<Guid?>("PnsDeclined");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ResultGiven");

                    b.Property<Guid?>("SecondTestResult");

                    b.Property<string>("SecondTestResultCode");

                    b.Property<Guid?>("SelfTestOption");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsFinalTestResults");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsLinkage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ARTStartDate");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DatePromised");

                    b.Property<Guid>("EncounterId");

                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50);

                    b.Property<string>("FacilityHandedTo")
                        .HasMaxLength(50);

                    b.Property<string>("HandedTo")
                        .HasMaxLength(50);

                    b.Property<string>("ReferredTo")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.Property<string>("WorkerCarde")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsLinkages");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsMemberScreening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookingDate");

                    b.Property<bool>("BookingMet");

                    b.Property<DateTime?>("DateBookingMet");

                    b.Property<Guid>("Eligibility");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid>("HivStatus");

                    b.Property<Guid>("IndexClientId");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ScreeningDate");

                    b.Property<Guid?>("TraceId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsMemberScreenings");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsPartnerScreening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<bool>("BookingMet");

                    b.Property<DateTime?>("DateBookingMet");

                    b.Property<Guid>("Eligibility");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid>("HivStatus");

                    b.Property<Guid?>("IPVOutcome");

                    b.Property<Guid>("IPVScreening");

                    b.Property<Guid>("IndexClientId");

                    b.Property<Guid?>("LivingWithClient");

                    b.Property<string>("Occupation");

                    b.Property<Guid?>("PNSApproach");

                    b.Property<Guid?>("PNSRealtionship");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("PhysicalAssult");

                    b.Property<Guid?>("PnsAccepted");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ScreeningDate");

                    b.Property<Guid>("SexuallyUncomfortable");

                    b.Property<Guid>("Threatened");

                    b.Property<Guid?>("TraceId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsPartnerScreenings");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsPartnerTraceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<Guid?>("Consent");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid>("IndexClientId");

                    b.Property<Guid>("Mode");

                    b.Property<string>("ModeDisplay");

                    b.Property<Guid>("Outcome");

                    b.Property<string>("OutcomeDisplay");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsPartnerTraceResults");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attempt");

                    b.Property<Guid>("EncounterId");

                    b.Property<DateTime>("Expiry");

                    b.Property<bool>("IsValid");

                    b.Property<Guid>("Kit");

                    b.Property<string>("KitDisplay")
                        .HasMaxLength(50);

                    b.Property<string>("KitOther")
                        .HasMaxLength(50);

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50);

                    b.Property<Guid>("Result");

                    b.Property<string>("ResultCode")
                        .HasMaxLength(50);

                    b.Property<string>("ResultDisplay")
                        .HasMaxLength(50);

                    b.Property<string>("TestName")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsTestResults");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsTraceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid>("Mode");

                    b.Property<Guid>("Outcome");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("ObsTraceResults");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.PSmartStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date_Created");

                    b.Property<string>("Shr");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Status_Date");

                    b.Property<Guid>("Uuid");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("PSmartStores");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.ClientPretestDisabilityStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientPretestStageId");

                    b.Property<int>("Disabilities");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientPretestStageId");

                    b.ToTable("ClientPretestDisabilityStages");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.ClientPretestStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<int?>("Consent");

                    b.Property<int?>("DisabilityIndicator");

                    b.Property<DateTime>("EncounterDate");

                    b.Property<int>("EncounterType");

                    b.Property<int?>("EverTested");

                    b.Property<decimal?>("MonthsSinceLastTest");

                    b.Property<string>("Remarks");

                    b.Property<int?>("SelfTest12Months");

                    b.Property<int?>("ServicePoint");

                    b.Property<DateTime>("StatusDate");

                    b.Property<int?>("Strategy");

                    b.Property<int>("SyncStatus");

                    b.Property<string>("SyncStatusInfo");

                    b.Property<int?>("TbScreening");

                    b.Property<int?>("TestedAs");

                    b.Property<int>("UserId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ClientPretestStages");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.ClientStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("DateOfBirthPrecision");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsIndex");

                    b.Property<int>("KeyPop");

                    b.Property<string>("Landmark");

                    b.Property<string>("LastName");

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Phone");

                    b.Property<Guid>("PracticeId");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Serial");

                    b.Property<int>("Sex");

                    b.Property<string>("SiteCode");

                    b.Property<DateTime>("StatusDate");

                    b.Property<int>("SyncStatus");

                    b.Property<string>("SyncStatusInfo");

                    b.Property<int>("UserId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ClientStages");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.ClientStageRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IndexClientId");

                    b.Property<bool>("IsPartner");

                    b.Property<int>("Relation");

                    b.Property<Guid>("SecondaryClientId");

                    b.Property<DateTime>("StatusDate");

                    b.Property<int>("SyncStatus");

                    b.Property<string>("SyncStatusInfo");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ClientStageRelationships");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.InvalidMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Message")
                        .HasMaxLength(4000);

                    b.Property<Guid?>("PracticeId");

                    b.Property<int>("Type");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("InvalidMessages");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.CategoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Display")
                        .HasMaxLength(100);

                    b.Property<Guid>("ItemId");

                    b.Property<decimal>("Rank");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItems");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.County", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.IdentifierType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("IdentifierTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.KeyPop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("KeyPops");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.MaritalStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.MasterFacility", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("AreaCode");

                    b.Property<string>("AreaInfo")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("MasterFacilities");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.PracticeType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("PracticeTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.ProviderType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ProviderTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.RelationshipType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("RelationshipTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.SubCounty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("SubCounties");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Network.Practice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int?>("CountyId");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PracticeTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("PracticeTypeId");

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Network.PracticeActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivationCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ActivationDate");

                    b.Property<string>("Device")
                        .HasMaxLength(150);

                    b.Property<string>("DeviceCode")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(150);

                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Lat");

                    b.Property<decimal?>("Lng");

                    b.Property<string>("Model")
                        .HasMaxLength(150);

                    b.Property<string>("Notes")
                        .HasMaxLength(150);

                    b.Property<Guid>("PracticeId");

                    b.Property<DateTime>("RequestDate");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PracticeId");

                    b.ToTable("PracticeActivations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AlreadyTestedPos");

                    b.Property<bool?>("IsFamilyMember");

                    b.Property<bool?>("IsPartner");

                    b.Property<string>("KeyPop")
                        .HasMaxLength(50);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(50);

                    b.Property<string>("OtherKeyPop")
                        .HasMaxLength(100);

                    b.Property<Guid>("PersonId");

                    b.Property<Guid>("PracticeId");

                    b.Property<bool?>("PreventEnroll");

                    b.Property<int?>("SyncStatus");

                    b.Property<DateTime?>("SyncStatusDate");

                    b.Property<string>("SyncStatusInfo");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PracticeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientAttribute", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAttributes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100);

                    b.Property<string>("IdentifierTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Preferred");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdentifierTypeId");

                    b.ToTable("ClientIdentifiers");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<bool?>("IsIndex");

                    b.Property<bool>("Preferred");

                    b.Property<Guid>("RelatedClientId");

                    b.Property<string>("RelationshipTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RelationshipTypeId");

                    b.ToTable("ClientRelationships");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid?>("EncounterId");

                    b.Property<Guid?>("IndexClientId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusDate");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientStates");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(100);

                    b.Property<Guid>("ClientId");

                    b.Property<decimal>("Rank");

                    b.Property<string>("Report")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ReportDate");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ClientSummaries");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<bool?>("BirthDateEstimated");

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountyId");

                    b.Property<string>("Landmark")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Lat");

                    b.Property<decimal?>("Lng");

                    b.Property<Guid>("PersonId");

                    b.Property<bool>("Preferred");

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("SourceRef")
                        .HasMaxLength(50);

                    b.Property<string>("SourceSys")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddresss");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PersonId");

                    b.Property<int?>("Phone");

                    b.Property<bool>("Preferred");

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("SourceRef")
                        .HasMaxLength(50);

                    b.Property<string>("SourceSys")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<string>("MothersName")
                        .HasMaxLength(100);

                    b.Property<string>("NickName");

                    b.Property<Guid>("PersonId");

                    b.Property<bool>("Preferred");

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("SourceRef")
                        .HasMaxLength(50);

                    b.Property<string>("SourceSys")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonNames");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("Initials")
                        .HasMaxLength(50);

                    b.Property<Guid>("PersonId");

                    b.Property<int?>("Phone");

                    b.Property<Guid?>("PracticeId");

                    b.Property<string>("ProviderTypeId")
                        .HasMaxLength(50);

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("SourceRef")
                        .HasMaxLength(50);

                    b.Property<string>("SourceSys")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PracticeId");

                    b.HasIndex("ProviderTypeId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.TempClientRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<bool?>("IsIndex");

                    b.Property<bool>("Preferred");

                    b.Property<Guid>("RelatedClientId");

                    b.Property<string>("RelationshipTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("TempClientRelationships");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasMaxLength(200);

                    b.Property<Guid>("PersonId");

                    b.Property<int?>("Phone");

                    b.Property<Guid?>("PracticeId");

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<string>("SourceRef")
                        .HasMaxLength(50);

                    b.Property<string>("SourceSys")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PracticeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.UserSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(100);

                    b.Property<decimal>("Rank");

                    b.Property<int>("Report");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSummaries");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.Action", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.Condition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConceptId");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<string>("Fact");

                    b.Property<Guid>("FormId");

                    b.Property<string>("Ordinal")
                        .HasMaxLength(50);

                    b.Property<decimal>("Rank");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("FormId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId")
                        .HasMaxLength(50);

                    b.Property<string>("ConditionId")
                        .HasMaxLength(50);

                    b.Property<Guid?>("GotoQuestionId");

                    b.Property<decimal?>("Group");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid?>("RefQuestionId");

                    b.Property<string>("Response")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseComplex")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionBranches");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionRemoteTransformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId")
                        .HasMaxLength(50);

                    b.Property<string>("AltContent")
                        .HasMaxLength(50);

                    b.Property<string>("ClientAttributeId")
                        .HasMaxLength(50);

                    b.Property<string>("ConditionId")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Group");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid?>("RemoteQuestionId");

                    b.Property<string>("Response")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseComplex")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SelfQuestionId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionRemoteTransformations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionReValidation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId")
                        .HasMaxLength(50);

                    b.Property<string>("ConditionId")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Group");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid>("QuestionValidationId");

                    b.Property<Guid?>("RefQuestionId");

                    b.Property<string>("Response")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseComplex")
                        .HasMaxLength(100);

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionReValidations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionTransformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId")
                        .HasMaxLength(50);

                    b.Property<string>("ConditionId")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Group");

                    b.Property<Guid>("QuestionId");

                    b.Property<decimal?>("Rank");

                    b.Property<Guid?>("RefQuestionId");

                    b.Property<string>("Response")
                        .HasMaxLength(50);

                    b.Property<string>("ResponseComplex")
                        .HasMaxLength(100);

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTransformation");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionValidation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MaxLimit")
                        .HasMaxLength(50);

                    b.Property<string>("MinLimit")
                        .HasMaxLength(50);

                    b.Property<Guid>("QuestionId");

                    b.Property<int>("Revision");

                    b.Property<string>("ValidatorId")
                        .HasMaxLength(50);

                    b.Property<string>("ValidatorTypeId")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ValidatorId");

                    b.HasIndex("ValidatorTypeId");

                    b.ToTable("QuestionValidations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.Validator", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Rank");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Validators");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.ValidatorType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ValidatorTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.Concept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<string>("ConceptTypeId")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.ConceptType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("ConceptTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.EncounterType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("EncounterTypes");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<Guid>("ModuleId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Rank");

                    b.Property<string>("Version")
                        .HasMaxLength(50);

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.FormImplementation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<Guid>("FormId");

                    b.Property<Guid>("PracticeId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PracticeId");

                    b.ToTable("FormImplementations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.FormProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<Guid>("EncounterTypeId");

                    b.Property<Guid>("FormId");

                    b.Property<decimal>("Rank");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("EncounterTypeId");

                    b.HasIndex("FormId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Display")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Rank");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberCohort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Display");

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<Guid>("SubscriberSystemId");

                    b.Property<string>("View");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberCohorts");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<Guid>("SubscriberSystemId");

                    b.Property<string>("Value");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberConfigs");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Field");

                    b.Property<string>("FormId");

                    b.Property<int>("Group");

                    b.Property<string>("Mode");

                    b.Property<string>("Name");

                    b.Property<string>("SectionId");

                    b.Property<string>("SubField");

                    b.Property<string>("SubName");

                    b.Property<string>("SubType");

                    b.Property<Guid>("SubscriberSystemId");

                    b.Property<string>("Type");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberMaps");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateProcessed");

                    b.Property<string>("Description");

                    b.Property<bool>("Processed");

                    b.Property<decimal>("Rank");

                    b.Property<string>("Subject");

                    b.Property<Guid>("SubscriberSystemId");

                    b.Property<string>("Type");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberMessagess");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberSqlAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rank");

                    b.Property<Guid?>("SubscriberSystemId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberSqlActions");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.ToTable("SubscriberSystems");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Display");

                    b.Property<int>("Group");

                    b.Property<bool>("IsText");

                    b.Property<string>("Ref");

                    b.Property<string>("SubCode");

                    b.Property<string>("SubDisplay");

                    b.Property<string>("SubRef");

                    b.Property<Guid>("SubscriberSystemId");

                    b.Property<bool>("Voided");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberSystemId");

                    b.ToTable("SubscriberTranslations");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.Encounter", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Client")
                        .WithMany("Encounters")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Studio.EncounterType")
                        .WithMany("Encounters")
                        .HasForeignKey("EncounterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Studio.Form")
                        .WithMany("Encounters")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.Obs", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("Obses")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsFamilyTraceResult", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsFamilyTraceResults")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsFinalTestResult", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsFinalTestResults")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsLinkage", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsLinkages")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsMemberScreening", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsMemberScreenings")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsPartnerScreening", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsPartnerScreenings")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsPartnerTraceResult", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsPartnerTraceResults")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsTestResult", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsTestResults")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Encounters.ObsTraceResult", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Encounters.Encounter")
                        .WithMany("ObsTraceResults")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Exchange.ClientPretestDisabilityStage", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Exchange.ClientPretestStage")
                        .WithMany("Disabilities")
                        .HasForeignKey("ClientPretestStageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.CategoryItem", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Lookup.Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Lookup.Item")
                        .WithMany("Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Lookup.SubCounty", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Lookup.County")
                        .WithMany("SubCounties")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Network.Practice", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Lookup.County")
                        .WithMany("Practices")
                        .HasForeignKey("CountyId");

                    b.HasOne("LiveHAPI.Core.Model.Lookup.PracticeType")
                        .WithMany("Practices")
                        .HasForeignKey("PracticeTypeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Network.PracticeActivation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Network.Practice")
                        .WithMany("Activations")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.Client", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Clients")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Network.Practice")
                        .WithMany("Clients")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientAttribute", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Client")
                        .WithMany("Attributes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientIdentifier", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Client")
                        .WithMany("Identifiers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Lookup.IdentifierType")
                        .WithMany("ClientIdentifiers")
                        .HasForeignKey("IdentifierTypeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientRelationship", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Client")
                        .WithMany("Relationships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Lookup.RelationshipType")
                        .WithMany("ClientRelationships")
                        .HasForeignKey("RelationshipTypeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.ClientState", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Client")
                        .WithMany("ClientStates")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonAddress", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Lookup.County")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("CountyId");

                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonContact", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.PersonName", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Names")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.Provider", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Providers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Network.Practice")
                        .WithMany("Providers")
                        .HasForeignKey("PracticeId");

                    b.HasOne("LiveHAPI.Core.Model.Lookup.ProviderType")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderTypeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.User", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Network.Practice")
                        .WithMany("Users")
                        .HasForeignKey("PracticeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.People.UserSummary", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.People.User")
                        .WithMany("UserSummaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.Question", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Studio.Concept")
                        .WithMany("Questions")
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Studio.Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionBranch", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.QModel.Action")
                        .WithMany("Branches")
                        .HasForeignKey("ActionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Condition")
                        .WithMany("Branches")
                        .HasForeignKey("ConditionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Question")
                        .WithMany("Branches")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionRemoteTransformation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.QModel.Action")
                        .WithMany("RemoteTransformations")
                        .HasForeignKey("ActionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Condition")
                        .WithMany("RemoteTransformations")
                        .HasForeignKey("ConditionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Question")
                        .WithMany("RemoteTransformations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionReValidation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.QModel.Action")
                        .WithMany("ReValidations")
                        .HasForeignKey("ActionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Condition")
                        .WithMany("ReValidations")
                        .HasForeignKey("ConditionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Question")
                        .WithMany("ReValidations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionTransformation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.QModel.Action")
                        .WithMany("Transformations")
                        .HasForeignKey("ActionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Condition")
                        .WithMany("Transformations")
                        .HasForeignKey("ConditionId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.Question")
                        .WithMany("Transformations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.QModel.QuestionValidation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.QModel.Question")
                        .WithMany("Validations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.QModel.Validator")
                        .WithMany("QuestionValidations")
                        .HasForeignKey("ValidatorId");

                    b.HasOne("LiveHAPI.Core.Model.QModel.ValidatorType")
                        .WithMany("QuestionValidations")
                        .HasForeignKey("ValidatorTypeId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.Concept", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Lookup.Category")
                        .WithMany("Concepts")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.Form", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Studio.Module")
                        .WithMany("Forms")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.FormImplementation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Studio.Form")
                        .WithMany("Implementations")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Network.Practice")
                        .WithMany("FormImplementation")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Studio.FormProgram", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Studio.EncounterType")
                        .WithMany("Programs")
                        .HasForeignKey("EncounterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveHAPI.Core.Model.Studio.Form")
                        .WithMany("Programs")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberCohort", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Cohorts")
                        .HasForeignKey("SubscriberSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberConfig", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Configs")
                        .HasForeignKey("SubscriberSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberMap", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Maps")
                        .HasForeignKey("SubscriberSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberMessage", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Messages")
                        .HasForeignKey("SubscriberSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberSqlAction", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Actions")
                        .HasForeignKey("SubscriberSystemId");
                });

            modelBuilder.Entity("LiveHAPI.Core.Model.Subscriber.SubscriberTranslation", b =>
                {
                    b.HasOne("LiveHAPI.Core.Model.Subscriber.SubscriberSystem")
                        .WithMany("Translations")
                        .HasForeignKey("SubscriberSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
